package support

import (
    "go-eve/utils"
    "log"
    "fmt"
    "io"
    "regexp"
    "net/url"
)

func SearchExploit(param string, limit int) [][]string {
    var cves [][]string

    baseURL := "https://cve.mitre.org/cgi-bin/cvekey.cgi"
    paramsURL := url.Values{}
    paramsURL.Add("keyword", param) // Adiciona o keyword
    testURL := fmt.Sprintf("%s?%s", baseURL, paramsURL.Encode())
    // fmt.Println(testURL) DEBUG

    method := "GET"
    params := ""
    headers := map[string]string{
        "User-Agent": "Go-http-client/1.1",
    }
    timeout := 10

    status, resp, err := utils.Request(testURL, method, params, headers, timeout)
    if !status {
        log.Printf("Erro na requisição: %v\n", err)
        return nil
    }
    defer resp.Body.Close()

    body, _ := io.ReadAll(resp.Body)
    html := string(body)

    // Expressão regular corrigida para capturar CVEs corretamente
    reCVE := regexp.MustCompile(`<td[^>]*>\s*<a href="(https://www\.cve\.org/CVERecord\?id=CVE-\d{4}-\d+)">(CVE-\d{4}-\d+)</a>\s*</td>\s*<td[^>]*>\s*(.*?)\s*</td>`)

    matches := reCVE.FindAllStringSubmatch(html, -1)

    if len(matches) == 0 {
        fmt.Println("Nenhum CVE encontrado. Verifique se o HTML foi carregado corretamente.")
        return nil
    }

    for i, match := range matches {
        if i >= limit { // Limita os resultados
            break
        }
        
	link := match[1] // Captura o link
	if !regexp.MustCompile(`^https?://`).MatchString(link) {
		link = "https://cve.mitre.org" + link // Adiciona o domínio apenas se necessário
	}

        cve := []string{match[2], match[3], link}
        cves = append(cves, cve)
    }

    return cves
}
